//
// File generated by rootcint at Sun May  3 00:47:33 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME SimpleTableDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SimpleTableDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CTable CTable;
      #else
      class CTable  {
         public:
         //friend XX;
         vector< vector< ::string, allocator< ::string >  >  > table_; //row <column>
         vector< size_t > colWidth_; //
         vector< ::string > colLabels_; //
         vector< ::string > rowLabels_; //
         unsigned long width_; //
         unsigned long height_; //
         unsigned long defaultWidth_; //
         unsigned long rowLabelWidth_; //
         unsigned long colLabelHeight_; //
         unsigned long precision_; //
         string title_; //
         string delineator_; //
         string lend_; //
         string rend_; //
         string corner_; //
         ::basic_ostream< char, ::char_traits< char >  >* out_; //
         ::basic_ofstream< char, ::char_traits< char >  >* file_; //
         bool dispTitle_; //
         bool dispLines_; //
         bool useVertColLabels_; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CNumBase< float > CNumBaselEfloatgR;
      #else
      class CNumBaselEfloatgR  {
         public:
         //friend XX;
         float data_; //
         float stat_; //should I make it so that the errors can be different above and below?
         float syst_; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CNumBase< double > CNumBaselEdoublegR;
      #else
      class CNumBaselEdoublegR  {
         public:
         //friend XX;
         double data_; //
         double stat_; //should I make it so that the errors can be different above and below?
         double syst_; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void CTable_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CTable_Dictionary();
   static void *new_CTable(void *p = 0);
   static void *newArray_CTable(Long_t size, void *p);
   static void delete_CTable(void *p);
   static void deleteArray_CTable(void *p);
   static void destruct_CTable(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CTable*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CTable) == sizeof(::ROOT::Shadow::CTable));
      ::CTable *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CTable),0);
      static ::ROOT::TGenericClassInfo 
         instance("CTable", "./CTable.h", 16,
                  typeid(::CTable), DefineBehavior(ptr, ptr),
                  &CTable_ShowMembers, &CTable_Dictionary, isa_proxy, 4,
                  sizeof(::CTable) );
      instance.SetNew(&new_CTable);
      instance.SetNewArray(&newArray_CTable);
      instance.SetDelete(&delete_CTable);
      instance.SetDeleteArray(&deleteArray_CTable);
      instance.SetDestructor(&destruct_CTable);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CTable*)
   {
      return GenerateInitInstanceLocal((::CTable*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CTable*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CTable_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CTable*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CNumBaselEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CNumBaselEfloatgR_Dictionary();
   static void *new_CNumBaselEfloatgR(void *p = 0);
   static void *newArray_CNumBaselEfloatgR(Long_t size, void *p);
   static void delete_CNumBaselEfloatgR(void *p);
   static void deleteArray_CNumBaselEfloatgR(void *p);
   static void destruct_CNumBaselEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CNumBase<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CNumBase<float>) == sizeof(::ROOT::Shadow::CNumBaselEfloatgR));
      ::CNumBase<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CNumBase<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("CNumBase<float>", "./CNumBase.h", 7,
                  typeid(::CNumBase<float>), DefineBehavior(ptr, ptr),
                  &CNumBaselEfloatgR_ShowMembers, &CNumBaselEfloatgR_Dictionary, isa_proxy, 4,
                  sizeof(::CNumBase<float>) );
      instance.SetNew(&new_CNumBaselEfloatgR);
      instance.SetNewArray(&newArray_CNumBaselEfloatgR);
      instance.SetDelete(&delete_CNumBaselEfloatgR);
      instance.SetDeleteArray(&deleteArray_CNumBaselEfloatgR);
      instance.SetDestructor(&destruct_CNumBaselEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CNumBase<float>*)
   {
      return GenerateInitInstanceLocal((::CNumBase<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CNumBase<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CNumBaselEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CNumBase<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CNumBaselEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CNumBaselEdoublegR_Dictionary();
   static void *new_CNumBaselEdoublegR(void *p = 0);
   static void *newArray_CNumBaselEdoublegR(Long_t size, void *p);
   static void delete_CNumBaselEdoublegR(void *p);
   static void deleteArray_CNumBaselEdoublegR(void *p);
   static void destruct_CNumBaselEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CNumBase<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CNumBase<double>) == sizeof(::ROOT::Shadow::CNumBaselEdoublegR));
      ::CNumBase<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CNumBase<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("CNumBase<double>", "./CNumBase.h", 7,
                  typeid(::CNumBase<double>), DefineBehavior(ptr, ptr),
                  &CNumBaselEdoublegR_ShowMembers, &CNumBaselEdoublegR_Dictionary, isa_proxy, 4,
                  sizeof(::CNumBase<double>) );
      instance.SetNew(&new_CNumBaselEdoublegR);
      instance.SetNewArray(&newArray_CNumBaselEdoublegR);
      instance.SetDelete(&delete_CNumBaselEdoublegR);
      instance.SetDeleteArray(&deleteArray_CNumBaselEdoublegR);
      instance.SetDestructor(&destruct_CNumBaselEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CNumBase<double>*)
   {
      return GenerateInitInstanceLocal((::CNumBase<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CNumBase<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CNumBaselEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CNumBase<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void CNumBaselEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CNumBase<float>.
      typedef ::ROOT::Shadow::CNumBaselEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CNumBase<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data_", &sobj->data_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stat_", &sobj->stat_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "syst_", &sobj->syst_);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CNumBaselEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CNumBase<float> : new ::CNumBase<float>;
   }
   static void *newArray_CNumBaselEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CNumBase<float>[nElements] : new ::CNumBase<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_CNumBaselEfloatgR(void *p) {
      delete ((::CNumBase<float>*)p);
   }
   static void deleteArray_CNumBaselEfloatgR(void *p) {
      delete [] ((::CNumBase<float>*)p);
   }
   static void destruct_CNumBaselEfloatgR(void *p) {
      typedef ::CNumBase<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CNumBase<float>

//______________________________________________________________________________
namespace ROOT {
   void CNumBaselEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CNumBase<double>.
      typedef ::ROOT::Shadow::CNumBaselEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CNumBase<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data_", &sobj->data_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stat_", &sobj->stat_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "syst_", &sobj->syst_);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CNumBaselEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CNumBase<double> : new ::CNumBase<double>;
   }
   static void *newArray_CNumBaselEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CNumBase<double>[nElements] : new ::CNumBase<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_CNumBaselEdoublegR(void *p) {
      delete ((::CNumBase<double>*)p);
   }
   static void deleteArray_CNumBaselEdoublegR(void *p) {
      delete [] ((::CNumBase<double>*)p);
   }
   static void destruct_CNumBaselEdoublegR(void *p) {
      typedef ::CNumBase<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CNumBase<double>

//______________________________________________________________________________
namespace ROOT {
   void CTable_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CTable.
      typedef ::ROOT::Shadow::CTable ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CTable*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "table_", (void*)&sobj->table_);
      R__insp.InspectMember("vector<std::vector<std::string> >", (void*)&sobj->table_, "table_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "colWidth_", (void*)&sobj->colWidth_);
      R__insp.InspectMember("vector<size_t>", (void*)&sobj->colWidth_, "colWidth_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "colLabels_", (void*)&sobj->colLabels_);
      R__insp.InspectMember("vector<std::string>", (void*)&sobj->colLabels_, "colLabels_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rowLabels_", (void*)&sobj->rowLabels_);
      R__insp.InspectMember("vector<std::string>", (void*)&sobj->rowLabels_, "rowLabels_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "width_", &sobj->width_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "height_", &sobj->height_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "defaultWidth_", &sobj->defaultWidth_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rowLabelWidth_", &sobj->rowLabelWidth_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "colLabelHeight_", &sobj->colLabelHeight_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "precision_", &sobj->precision_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "title_", (void*)&sobj->title_);
      R__insp.InspectMember("string", (void*)&sobj->title_, "title_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "delineator_", (void*)&sobj->delineator_);
      R__insp.InspectMember("string", (void*)&sobj->delineator_, "delineator_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lend_", (void*)&sobj->lend_);
      R__insp.InspectMember("string", (void*)&sobj->lend_, "lend_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rend_", (void*)&sobj->rend_);
      R__insp.InspectMember("string", (void*)&sobj->rend_, "rend_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corner_", (void*)&sobj->corner_);
      R__insp.InspectMember("string", (void*)&sobj->corner_, "corner_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*out_", &sobj->out_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*file_", &sobj->file_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dispTitle_", &sobj->dispTitle_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dispLines_", &sobj->dispLines_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useVertColLabels_", &sobj->useVertColLabels_);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CTable(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CTable : new ::CTable;
   }
   static void *newArray_CTable(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CTable[nElements] : new ::CTable[nElements];
   }
   // Wrapper around operator delete
   static void delete_CTable(void *p) {
      delete ((::CTable*)p);
   }
   static void deleteArray_CTable(void *p) {
      delete [] ((::CTable*)p);
   }
   static void destruct_CTable(void *p) {
      typedef ::CTable current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CTable

namespace ROOT {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "/cvmfs/cms.cern.ch/slc6_amd64_gcc481/lcg/root/5.34.18-cms12/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<string>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<string>

namespace ROOT {
   void vectorlEunsignedsPlonggR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPlonggR_Dictionary();
   static void *new_vectorlEunsignedsPlonggR(void *p = 0);
   static void *newArray_vectorlEunsignedsPlonggR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPlonggR(void *p);
   static void deleteArray_vectorlEunsignedsPlonggR(void *p);
   static void destruct_vectorlEunsignedsPlonggR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned long>*)
   {
      vector<unsigned long> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned long>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned long>", -2, "vector.dll", 0,
                  typeid(vector<unsigned long>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPlonggR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned long>) );
      instance.SetNew(&new_vectorlEunsignedsPlonggR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPlonggR);
      instance.SetDelete(&delete_vectorlEunsignedsPlonggR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPlonggR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPlonggR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned long> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned long>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPlonggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned long>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPlonggR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned long> : new vector<unsigned long>;
   }
   static void *newArray_vectorlEunsignedsPlonggR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned long>[nElements] : new vector<unsigned long>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPlonggR(void *p) {
      delete ((vector<unsigned long>*)p);
   }
   static void deleteArray_vectorlEunsignedsPlonggR(void *p) {
      delete [] ((vector<unsigned long>*)p);
   }
   static void destruct_vectorlEunsignedsPlonggR(void *p) {
      typedef vector<unsigned long> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned long>

namespace ROOT {
   void vectorlEvectorlEstringgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEstringgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEstringgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEstringgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEstringgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEstringgRsPgR(void *p);
   static void destruct_vectorlEvectorlEstringgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<string> >*)
   {
      vector<vector<string> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<string> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<string> >", -2, "/cvmfs/cms.cern.ch/slc6_amd64_gcc481/lcg/root/5.34.18-cms12/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<string> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEstringgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<vector<string> >) );
      instance.SetNew(&new_vectorlEvectorlEstringgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEstringgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEstringgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEstringgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEstringgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<string> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<string> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEstringgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<string> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEstringgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<string> > : new vector<vector<string> >;
   }
   static void *newArray_vectorlEvectorlEstringgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<string> >[nElements] : new vector<vector<string> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEstringgRsPgR(void *p) {
      delete ((vector<vector<string> >*)p);
   }
   static void deleteArray_vectorlEvectorlEstringgRsPgR(void *p) {
      delete [] ((vector<vector<string> >*)p);
   }
   static void destruct_vectorlEvectorlEstringgRsPgR(void *p) {
      typedef vector<vector<string> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<string> >

/********************************************************
* SimpleTableDict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSimpleTableDict();

extern "C" void G__set_cpp_environmentSimpleTableDict() {
  G__cpp_reset_tagtableSimpleTableDict();
}
#include <new>
extern "C" int G__cpp_dllrevSimpleTableDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* CTable */
static int G__SimpleTableDict_186_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CTable* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CTable[n];
     } else {
       p = new((void*) gvp) CTable[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CTable;
     } else {
       p = new((void*) gvp) CTable;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_CTable));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CTableColumnLabeler* pobj;
         CTableColumnLabeler xobj = ((CTable*) G__getstructoffset())->setTable();
         pobj = new CTableColumnLabeler(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CTableCellSetter* pobj;
         CTableCellSetter xobj = ((CTable*) G__getstructoffset())->setCells();
         pobj = new CTableCellSetter(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setCell(*(string*) libp->para[0].ref, (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setCell((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setCell((int) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setCell((float) G__double(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setCell((double) G__double(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setCell(*(TString*) libp->para[0].ref, (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setCell(*(CNumBase<float>*) libp->para[0].ref, (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setCell(*(CNumBase<double>*) libp->para[0].ref, (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setColLabel(*(string*) libp->para[0].ref, (size_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setColLabel((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setColLabel(*(TString*) libp->para[0].ref, (size_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setRowLabel(*(string*) libp->para[0].ref, (size_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setRowLabel((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setRowLabel(*(TString*) libp->para[0].ref, (size_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((CTable*) G__getstructoffset())->getNumRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((CTable*) G__getstructoffset())->getNumCols());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setTitle(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setTitle(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->setPrecision((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((CTable*) G__getstructoffset())->useLines((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((CTable*) G__getstructoffset())->useLines();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((CTable*) G__getstructoffset())->useTitle((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((CTable*) G__getstructoffset())->useTitle();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((CTable*) G__getstructoffset())->useVertColLabels((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((CTable*) G__getstructoffset())->useVertColLabels();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CTable*) G__getstructoffset())->printTitle();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CTable*) G__getstructoffset())->printColLabels();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CTable*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((CTable*) G__getstructoffset())->saveAs(*(string*) libp->para[0].ref, (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((CTable*) G__getstructoffset())->saveAs(*(string*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CTable*) G__getstructoffset())->saveTex(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_186_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CTable*) G__getstructoffset())->printTex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimpleTableDict_186_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CTable* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CTable(*(CTable*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_CTable));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CTable G__TCTable;
static int G__SimpleTableDict_186_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CTable*) (soff+(sizeof(CTable)*i)))->~G__TCTable();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CTable*) (soff))->~G__TCTable();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimpleTableDict_186_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CTable* dest = (CTable*) G__getstructoffset();
   *dest = *(CTable*) libp->para[0].ref;
   const CTable& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<string,allocator<string> > */
static int G__SimpleTableDict_188_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<string,allocator<string> >::reference obj = ((vector<string,allocator<string> >*) G__getstructoffset())->at((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::const_reference obj = ((const vector<string,allocator<string> >*) G__getstructoffset())->at((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::iterator* pobj;
         vector<string,allocator<string> >::iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->begin();
         pobj = new vector<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::iterator* pobj;
         vector<string,allocator<string> >::iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->end();
         pobj = new vector<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::reverse_iterator* pobj;
         vector<string,allocator<string> >::reverse_iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->rbegin();
         pobj = new vector<string,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::reverse_iterator* pobj;
         vector<string,allocator<string> >::reverse_iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->rend();
         pobj = new vector<string,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<string,allocator<string> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<string,allocator<string> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->resize((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->resize((vector<string,allocator<string> >::size_type) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<string,allocator<string> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<string,allocator<string> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<string,allocator<string> >::reference obj = ((vector<string,allocator<string> >*) G__getstructoffset())->operator[]((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::const_reference obj = ((const vector<string,allocator<string> >*) G__getstructoffset())->operator[]((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<string,allocator<string> >[n];
     } else {
       p = new((void*) gvp) vector<string,allocator<string> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<string,allocator<string> >;
     } else {
       p = new((void*) gvp) vector<string,allocator<string> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<string,allocator<string> >((vector<string,allocator<string> >::size_type) G__int(libp->para[0]), *(string*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<string,allocator<string> >((vector<string,allocator<string> >::size_type) G__int(libp->para[0]), *(string*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<string,allocator<string> >((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<string,allocator<string> >((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<string,allocator<string> >(*(vector<string,allocator<string> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<string,allocator<string> >(*(vector<string,allocator<string> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<string,allocator<string> >(*((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[0])), *((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<string,allocator<string> >(*((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[0])), *((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<string,allocator<string> >& obj = ((vector<string,allocator<string> >*) G__getstructoffset())->operator=(*(vector<string,allocator<string> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->reserve((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((vector<string,allocator<string> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((vector<string,allocator<string> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->push_back(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->swap(*(vector<string,allocator<string> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::iterator* pobj;
         vector<string,allocator<string> >::iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->insert(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])), *(string*) libp->para[1].ref);
         pobj = new vector<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->insert(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[1]))
, *((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->insert(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])), (vector<string,allocator<string> >::size_type) G__int(libp->para[1])
, *(string*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->erase(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->erase(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((vector<string,allocator<string> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_188_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<string,allocator<string> > G__TvectorlEstringcOallocatorlEstringgRsPgR;
static int G__SimpleTableDict_188_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<string,allocator<string> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<string,allocator<string> >*) (soff+(sizeof(vector<string,allocator<string> >)*i)))->~G__TvectorlEstringcOallocatorlEstringgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<string,allocator<string> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<string,allocator<string> >*) (soff))->~G__TvectorlEstringcOallocatorlEstringgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > > */
static int G__SimpleTableDict_192_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::reference obj = ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->at((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_reference obj = ((const vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->at((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator* pobj;
         vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator xobj = ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator* pobj;
         vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator xobj = ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::reverse_iterator* pobj;
         vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::reverse_iterator xobj = ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::reverse_iterator* pobj;
         vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::reverse_iterator xobj = ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->resize((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->resize((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type) G__int(libp->para[0]), *((vector<string,allocator<string> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::reference obj = ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->operator[]((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_reference obj = ((const vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->operator[]((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >;
     } else {
       p = new((void*) gvp) vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type) G__int(libp->para[0]), *(vector<string,allocator<string> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type) G__int(libp->para[0]), *(vector<string,allocator<string> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >(*(vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >(*(vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >(*((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >(*((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >& obj = ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->operator=(*(vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->reserve((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<string,allocator<string> >& obj = ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<string,allocator<string> >& obj = ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->push_back(*(vector<string,allocator<string> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->swap(*(vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator* pobj;
         vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator xobj = ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->insert(*((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator*) G__int(libp->para[0])), *(vector<string,allocator<string> >*) libp->para[1].ref);
         pobj = new vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->insert(*((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->insert(*((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator*) G__int(libp->para[0])), (vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type) G__int(libp->para[1])
, *(vector<string,allocator<string> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->erase(*((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->erase(*((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_192_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > > G__TvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR;
static int G__SimpleTableDict_192_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) (soff+(sizeof(vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >)*i)))->~G__TvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*) (soff))->~G__TvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CNumBase<float> */
static int G__SimpleTableDict_195_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CNumBase<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CNumBase<float>(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) CNumBase<float>(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CNumBase<float>((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) CNumBase<float>((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CNumBase<float>((float) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) CNumBase<float>((float) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new CNumBase<float>[n];
       } else {
         p = new((void*) gvp) CNumBase<float>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new CNumBase<float>;
       } else {
         p = new((void*) gvp) CNumBase<float>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CNumBase<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CNumBase<float>(*(CNumBase<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CNumBase<float>(*(CNumBase<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const CNumBase<float>*) G__getstructoffset())->data());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const CNumBase<float>*) G__getstructoffset())->stat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const CNumBase<float>*) G__getstructoffset())->syst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const CNumBase<float>*) G__getstructoffset())->error());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const CNumBase<float>*) G__getstructoffset())->print((bool) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const CNumBase<float>*) G__getstructoffset())->print((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const CNumBase<float>*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CNumBase<float>* pobj;
         CNumBase<float> xobj = ((CNumBase<float>*) G__getstructoffset())->setData((float) G__double(libp->para[0]));
         pobj = new CNumBase<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CNumBase<float>* pobj;
         CNumBase<float> xobj = ((CNumBase<float>*) G__getstructoffset())->setStat((float) G__double(libp->para[0]));
         pobj = new CNumBase<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CNumBase<float>* pobj;
         CNumBase<float> xobj = ((CNumBase<float>*) G__getstructoffset())->setSyst((float) G__double(libp->para[0]));
         pobj = new CNumBase<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CNumBase<float>* pobj;
         CNumBase<float> xobj = ((CNumBase<float>*) G__getstructoffset())->gaussian();
         pobj = new CNumBase<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<float>* pobj;
         const CNumBase<float> xobj = ((const CNumBase<float>*) G__getstructoffset())->operator*((float) G__double(libp->para[0]));
         pobj = new CNumBase<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<float>* pobj;
         const CNumBase<float> xobj = ((const CNumBase<float>*) G__getstructoffset())->operator*(*(CNumBase<float>*) libp->para[0].ref);
         pobj = new CNumBase<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<float>* pobj;
         const CNumBase<float> xobj = ((const CNumBase<float>*) G__getstructoffset())->operator/((float) G__double(libp->para[0]));
         pobj = new CNumBase<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<float>* pobj;
         const CNumBase<float> xobj = ((const CNumBase<float>*) G__getstructoffset())->operator/(*(CNumBase<float>*) libp->para[0].ref);
         pobj = new CNumBase<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<float>* pobj;
         const CNumBase<float> xobj = ((const CNumBase<float>*) G__getstructoffset())->operator+(*(CNumBase<float>*) libp->para[0].ref);
         pobj = new CNumBase<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<float>* pobj;
         const CNumBase<float> xobj = ((const CNumBase<float>*) G__getstructoffset())->operator-(*(CNumBase<float>*) libp->para[0].ref);
         pobj = new CNumBase<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_195_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<float>& obj = ((CNumBase<float>*) G__getstructoffset())->operator=(*(CNumBase<float>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CNumBase<float> G__TCNumBaselEfloatgR;
static int G__SimpleTableDict_195_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CNumBase<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CNumBase<float>*) (soff+(sizeof(CNumBase<float>)*i)))->~G__TCNumBaselEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CNumBase<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CNumBase<float>*) (soff))->~G__TCNumBaselEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CNumBase<double> */
static int G__SimpleTableDict_196_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CNumBase<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CNumBase<double>(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) CNumBase<double>(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CNumBase<double>((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) CNumBase<double>((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CNumBase<double>((double) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) CNumBase<double>((double) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new CNumBase<double>[n];
       } else {
         p = new((void*) gvp) CNumBase<double>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new CNumBase<double>;
       } else {
         p = new((void*) gvp) CNumBase<double>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CNumBase<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CNumBase<double>(*(CNumBase<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CNumBase<double>(*(CNumBase<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CNumBase<double>*) G__getstructoffset())->data());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CNumBase<double>*) G__getstructoffset())->stat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CNumBase<double>*) G__getstructoffset())->syst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CNumBase<double>*) G__getstructoffset())->error());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const CNumBase<double>*) G__getstructoffset())->print((bool) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const CNumBase<double>*) G__getstructoffset())->print((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const CNumBase<double>*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CNumBase<double>* pobj;
         CNumBase<double> xobj = ((CNumBase<double>*) G__getstructoffset())->setData((double) G__double(libp->para[0]));
         pobj = new CNumBase<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CNumBase<double>* pobj;
         CNumBase<double> xobj = ((CNumBase<double>*) G__getstructoffset())->setStat((double) G__double(libp->para[0]));
         pobj = new CNumBase<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CNumBase<double>* pobj;
         CNumBase<double> xobj = ((CNumBase<double>*) G__getstructoffset())->setSyst((double) G__double(libp->para[0]));
         pobj = new CNumBase<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CNumBase<double>* pobj;
         CNumBase<double> xobj = ((CNumBase<double>*) G__getstructoffset())->gaussian();
         pobj = new CNumBase<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<double>* pobj;
         const CNumBase<double> xobj = ((const CNumBase<double>*) G__getstructoffset())->operator*((double) G__double(libp->para[0]));
         pobj = new CNumBase<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<double>* pobj;
         const CNumBase<double> xobj = ((const CNumBase<double>*) G__getstructoffset())->operator*(*(CNumBase<double>*) libp->para[0].ref);
         pobj = new CNumBase<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<double>* pobj;
         const CNumBase<double> xobj = ((const CNumBase<double>*) G__getstructoffset())->operator/((double) G__double(libp->para[0]));
         pobj = new CNumBase<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<double>* pobj;
         const CNumBase<double> xobj = ((const CNumBase<double>*) G__getstructoffset())->operator/(*(CNumBase<double>*) libp->para[0].ref);
         pobj = new CNumBase<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<double>* pobj;
         const CNumBase<double> xobj = ((const CNumBase<double>*) G__getstructoffset())->operator+(*(CNumBase<double>*) libp->para[0].ref);
         pobj = new CNumBase<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<double>* pobj;
         const CNumBase<double> xobj = ((const CNumBase<double>*) G__getstructoffset())->operator-(*(CNumBase<double>*) libp->para[0].ref);
         pobj = new CNumBase<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimpleTableDict_196_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CNumBase<double>& obj = ((CNumBase<double>*) G__getstructoffset())->operator=(*(CNumBase<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CNumBase<double> G__TCNumBaselEdoublegR;
static int G__SimpleTableDict_196_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CNumBase<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CNumBase<double>*) (soff+(sizeof(CNumBase<double>)*i)))->~G__TCNumBaselEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CNumBase<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CNumBase<double>*) (soff))->~G__TCNumBaselEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* CTable */

/* vector<string,allocator<string> > */

/* vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > > */

/* CNumBase<float> */

/* CNumBase<double> */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSimpleTableDict {
 public:
  G__Sizep2memfuncSimpleTableDict(): p(&G__Sizep2memfuncSimpleTableDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSimpleTableDict::*p)();
};

size_t G__get_sizep2memfuncSimpleTableDict()
{
  G__Sizep2memfuncSimpleTableDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSimpleTableDict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSimpleTableDict() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SimpleTableDictLN_string),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SimpleTableDictLN_string),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SimpleTableDictLN_string),256,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SimpleTableDictLN_string),1,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SimpleTableDictLN_string),257,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<std::string> >",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<string> >",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR),256,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR),1,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR),257,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<string,allocator<string> > >",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<size_t>",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<std::string> >",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<string> >",117,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* CTable */
static void G__setup_memvarCTable(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimpleTableDictLN_CTable));
   { CTable *p; p=(CTable*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<std::string> >"),-1,2,"table_=",0,"row <column>");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR),G__defined_typename("vector<size_t>"),-1,2,"colWidth_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,2,"colLabels_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,2,"rowLabels_=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"width_=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"height_=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"defaultWidth_=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"rowLabelWidth_=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"colLabelHeight_=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"precision_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimpleTableDictLN_string),-1,-1,2,"title_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimpleTableDictLN_string),-1,-1,2,"delineator_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimpleTableDictLN_string),-1,-1,2,"lend_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimpleTableDictLN_string),-1,-1,2,"rend_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimpleTableDictLN_string),-1,-1,2,"corner_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimpleTableDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ostream"),-1,2,"out_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimpleTableDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ofstream"),-1,2,"file_=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"dispTitle_=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"dispLines_=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"useVertColLabels_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<string,allocator<string> > */
static void G__setup_memvarvectorlEstringcOallocatorlEstringgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   { vector<string,allocator<string> > *p; p=(vector<string,allocator<string> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > > */
static void G__setup_memvarvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   { vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > > *p; p=(vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* CNumBase<float> */
static void G__setup_memvarCNumBaselEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR));
   { CNumBase<float> *p; p=(CNumBase<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"data_=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"stat_=",0,"should I make it so that the errors can be different above and below?");
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"syst_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CNumBase<double> */
static void G__setup_memvarCNumBaselEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR));
   { CNumBase<double> *p; p=(CNumBase<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"data_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"stat_=",0,"should I make it so that the errors can be different above and below?");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"syst_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSimpleTableDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncCTable(void) {
   /* CTable */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimpleTableDictLN_CTable));
   G__memfunc_setup("calcLine",795,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printLine",949,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 8, 
"c - - 0 - symbol k - 'size_t' 0 - length "
"g - - 0 'true' endline", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CTable",555,G__SimpleTableDict_186_0_3, 105, G__get_linked_tagnum(&G__SimpleTableDictLN_CTable), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTable",820,G__SimpleTableDict_186_0_4, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CTableColumnLabeler), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCells",831,G__SimpleTableDict_186_0_5, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CTableCellSetter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__SimpleTableDict_186_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - entry k - 'size_t' 0 - r "
"k - 'size_t' 0 - c", "index row and column from 0", (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__SimpleTableDict_186_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - entryc k - 'size_t' 0 - r "
"k - 'size_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__SimpleTableDict_186_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - entryi k - 'size_t' 0 - r "
"k - 'size_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__SimpleTableDict_186_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - entryf k - 'size_t' 0 - r "
"k - 'size_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__SimpleTableDict_186_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - entryd k - 'size_t' 0 - r "
"k - 'size_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__SimpleTableDict_186_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 11 - entryTS k - 'size_t' 0 - r "
"k - 'size_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__SimpleTableDict_186_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'CNumBase<float>' - 11 - entryn k - 'size_t' 0 - r "
"k - 'size_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__SimpleTableDict_186_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'CNumBase<double>' - 11 - entryn k - 'size_t' 0 - r "
"k - 'size_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setColLabel",1098,G__SimpleTableDict_186_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - label k - 'size_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setColLabel",1098,G__SimpleTableDict_186_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - labelc k - 'size_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setColLabel",1098,G__SimpleTableDict_186_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - labelTS k - 'size_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRowLabel",1124,G__SimpleTableDict_186_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - label k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRowLabel",1124,G__SimpleTableDict_186_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - labelc k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRowLabel",1124,G__SimpleTableDict_186_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - labelTS k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumRows",1051,G__SimpleTableDict_186_0_20, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumCols",1025,G__SimpleTableDict_186_0_21, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTitle",846,G__SimpleTableDict_186_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTitle",846,G__SimpleTableDict_186_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTitle",846,G__SimpleTableDict_186_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPrecision",1272,G__SimpleTableDict_186_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - precision", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useLines",840,G__SimpleTableDict_186_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useTitle",847,G__SimpleTableDict_186_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useVertColLabels",1631,G__SimpleTableDict_186_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' vert", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printTitle",1071,G__SimpleTableDict_186_0_29, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printColLabels",1438,G__SimpleTableDict_186_0_30, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__SimpleTableDict_186_0_31, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveAs",611,G__SimpleTableDict_186_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - filename g - - 0 'true' overwrite", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveTex",736,G__SimpleTableDict_186_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printTex",862,G__SimpleTableDict_186_0_34, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("CTable", 555, G__SimpleTableDict_186_0_35, (int) ('i'), G__get_linked_tagnum(&G__SimpleTableDictLN_CTable), -1, 0, 1, 1, 1, 0, "u 'CTable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CTable", 681, G__SimpleTableDict_186_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimpleTableDict_186_0_37, (int) ('u'), G__get_linked_tagnum(&G__SimpleTableDictLN_CTable), -1, 1, 1, 1, 1, 0, "u 'CTable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEstringcOallocatorlEstringgRsPgR(void) {
   /* vector<string,allocator<string> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__memfunc_setup("at",213,G__SimpleTableDict_188_0_1, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_string), G__defined_typename("vector<string,allocator<string> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SimpleTableDict_188_0_2, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_string), G__defined_typename("vector<string,allocator<string> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SimpleTableDict_188_0_3, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SimpleTableDict_188_0_4, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SimpleTableDict_188_0_5, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR), G__defined_typename("vector<string,allocator<string> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SimpleTableDict_188_0_6, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR), G__defined_typename("vector<string,allocator<string> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SimpleTableDict_188_0_7, 107, -1, G__defined_typename("vector<string,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SimpleTableDict_188_0_8, 107, -1, G__defined_typename("vector<string,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SimpleTableDict_188_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<string,allocator<string> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SimpleTableDict_188_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<string,allocator<string> >::size_type' 0 - sz u 'string' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SimpleTableDict_188_0_11, 107, -1, G__defined_typename("vector<string,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SimpleTableDict_188_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SimpleTableDict_188_0_13, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_string), G__defined_typename("vector<string,allocator<string> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SimpleTableDict_188_0_14, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_string), G__defined_typename("vector<string,allocator<string> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<string,allocator<string> >",3266,G__SimpleTableDict_188_0_15, 105, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<string,allocator<string> >",3266,G__SimpleTableDict_188_0_16, 105, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<string,allocator<string> >::size_type' 0 - n u 'string' - 11 'string()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<string,allocator<string> >",3266,G__SimpleTableDict_188_0_17, 105, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<string,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<string,allocator<string> >",3266,G__SimpleTableDict_188_0_18, 105, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' 'vector<string,allocator<string> >::const_iterator' 10 - first u 'vector<string,allocator<string> >::iterator' 'vector<string,allocator<string> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SimpleTableDict_188_0_19, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<string,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SimpleTableDict_188_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SimpleTableDict_188_0_21, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_string), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SimpleTableDict_188_0_22, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_string), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SimpleTableDict_188_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SimpleTableDict_188_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<string,allocator<string> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SimpleTableDict_188_0_25, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' - 0 - position u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SimpleTableDict_188_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' - 0 - position u 'vector<string,allocator<string> >::iterator' 'vector<string,allocator<string> >::const_iterator' 10 - first "
"u 'vector<string,allocator<string> >::iterator' 'vector<string,allocator<string> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SimpleTableDict_188_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' - 0 - position k - 'vector<string,allocator<string> >::size_type' 0 - n "
"u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SimpleTableDict_188_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SimpleTableDict_188_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<string,allocator<string> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SimpleTableDict_188_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' - 0 - first u 'vector<string,allocator<string> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SimpleTableDict_188_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<string,allocator<string> >", 3392, G__SimpleTableDict_188_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR(void) {
   /* vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__SimpleTableDict_192_0_1, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SimpleTableDict_192_0_2, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SimpleTableDict_192_0_3, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SimpleTableDict_192_0_4, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SimpleTableDict_192_0_5, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SimpleTableDict_192_0_6, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SimpleTableDict_192_0_7, 107, -1, G__defined_typename("vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SimpleTableDict_192_0_8, 107, -1, G__defined_typename("vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SimpleTableDict_192_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SimpleTableDict_192_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type' 0 - sz u 'vector<string,allocator<string> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SimpleTableDict_192_0_11, 107, -1, G__defined_typename("vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SimpleTableDict_192_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SimpleTableDict_192_0_13, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SimpleTableDict_192_0_14, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >",8504,G__SimpleTableDict_192_0_15, 105, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >",8504,G__SimpleTableDict_192_0_16, 105, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type' 0 - n u 'vector<string,allocator<string> >' - 11 '(vector<string,allocator<string> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >",8504,G__SimpleTableDict_192_0_17, 105, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >",8504,G__SimpleTableDict_192_0_18, 105, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator' 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_iterator' 10 - first u 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator' 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SimpleTableDict_192_0_19, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SimpleTableDict_192_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SimpleTableDict_192_0_21, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SimpleTableDict_192_0_22, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SimpleTableDict_192_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<string,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SimpleTableDict_192_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SimpleTableDict_192_0_25, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator' - 0 - position u 'vector<string,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SimpleTableDict_192_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator' - 0 - position u 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator' 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_iterator' 10 - first "
"u 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator' 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SimpleTableDict_192_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator' - 0 - position k - 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::size_type' 0 - n "
"u 'vector<string,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SimpleTableDict_192_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SimpleTableDict_192_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SimpleTableDict_192_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator' - 0 - first u 'vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SimpleTableDict_192_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >", 8630, G__SimpleTableDict_192_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCNumBaselEfloatgR(void) {
   /* CNumBase<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR));
   G__memfunc_setup("CNumBase<float>",1406,G__SimpleTableDict_195_0_1, 105, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR), -1, 0, 3, 1, 1, 0, 
"f - - 0 '0.0' datan f - - 0 '0.0' statn "
"f - - 0 '0.0' systn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CNumBase<float>",1406,G__SimpleTableDict_195_0_2, 105, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR), -1, 0, 1, 1, 1, 0, "u 'CNumBase<float>' - 11 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("data",410,G__SimpleTableDict_195_0_3, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("stat",444,G__SimpleTableDict_195_0_4, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("syst",467,G__SimpleTableDict_195_0_5, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("error",554,G__SimpleTableDict_195_0_6, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__SimpleTableDict_195_0_7, 121, -1, -1, 0, 2, 1, 1, 8, 
"g - - 0 'true' statn g - - 0 'true' systn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setData",710,G__SimpleTableDict_195_0_8, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR), -1, 0, 1, 1, 1, 0, "f - - 0 - datan", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStat",744,G__SimpleTableDict_195_0_9, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR), -1, 0, 1, 1, 1, 0, "f - - 0 - statn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSyst",767,G__SimpleTableDict_195_0_10, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR), -1, 0, 1, 1, 1, 0, "f - - 0 - systn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gaussian",859,G__SimpleTableDict_195_0_11, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__SimpleTableDict_195_0_12, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR), -1, 0, 1, 1, 1, 8, "f - - 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__SimpleTableDict_195_0_13, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR), -1, 0, 1, 1, 1, 8, "u 'CNumBase<float>' - 11 - mul", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/",923,G__SimpleTableDict_195_0_14, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR), -1, 0, 1, 1, 1, 8, "f - - 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/",923,G__SimpleTableDict_195_0_15, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR), -1, 0, 1, 1, 1, 8, "u 'CNumBase<float>' - 11 - div", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__SimpleTableDict_195_0_16, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR), -1, 0, 1, 1, 1, 8, "u 'CNumBase<float>' - 11 - add", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__SimpleTableDict_195_0_17, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR), -1, 0, 1, 1, 1, 8, "u 'CNumBase<float>' - 11 - sub", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SimpleTableDict_195_0_18, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEfloatgR), -1, 1, 1, 1, 1, 0, "u 'CNumBase<float>' - 11 - equal", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CNumBase<float>", 1532, G__SimpleTableDict_195_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCNumBaselEdoublegR(void) {
   /* CNumBase<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR));
   G__memfunc_setup("CNumBase<double>",1507,G__SimpleTableDict_196_0_1, 105, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR), -1, 0, 3, 1, 1, 0, 
"d - - 0 '0.0' datan d - - 0 '0.0' statn "
"d - - 0 '0.0' systn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CNumBase<double>",1507,G__SimpleTableDict_196_0_2, 105, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR), -1, 0, 1, 1, 1, 0, "u 'CNumBase<double>' - 11 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("data",410,G__SimpleTableDict_196_0_3, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("stat",444,G__SimpleTableDict_196_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("syst",467,G__SimpleTableDict_196_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("error",554,G__SimpleTableDict_196_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__SimpleTableDict_196_0_7, 121, -1, -1, 0, 2, 1, 1, 8, 
"g - - 0 'true' statn g - - 0 'true' systn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setData",710,G__SimpleTableDict_196_0_8, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR), -1, 0, 1, 1, 1, 0, "d - - 0 - datan", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStat",744,G__SimpleTableDict_196_0_9, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR), -1, 0, 1, 1, 1, 0, "d - - 0 - statn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSyst",767,G__SimpleTableDict_196_0_10, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR), -1, 0, 1, 1, 1, 0, "d - - 0 - systn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gaussian",859,G__SimpleTableDict_196_0_11, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__SimpleTableDict_196_0_12, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR), -1, 0, 1, 1, 1, 8, "d - - 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__SimpleTableDict_196_0_13, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR), -1, 0, 1, 1, 1, 8, "u 'CNumBase<double>' - 11 - mul", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/",923,G__SimpleTableDict_196_0_14, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR), -1, 0, 1, 1, 1, 8, "d - - 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/",923,G__SimpleTableDict_196_0_15, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR), -1, 0, 1, 1, 1, 8, "u 'CNumBase<double>' - 11 - div", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__SimpleTableDict_196_0_16, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR), -1, 0, 1, 1, 1, 8, "u 'CNumBase<double>' - 11 - add", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__SimpleTableDict_196_0_17, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR), -1, 0, 1, 1, 1, 8, "u 'CNumBase<double>' - 11 - sub", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SimpleTableDict_196_0_18, 117, G__get_linked_tagnum(&G__SimpleTableDictLN_CNumBaselEdoublegR), -1, 1, 1, 1, 1, 0, "u 'CNumBase<double>' - 11 - equal", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CNumBase<double>", 1633, G__SimpleTableDict_196_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSimpleTableDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSimpleTableDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSimpleTableDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SimpleTableDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR = { "vector<unsigned long,allocator<unsigned long> >" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ofstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_CTableCellSetter = { "CTableCellSetter" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_CTableColumnLabeler = { "CTableColumnLabeler" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_CTable = { "CTable" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator = { "vector<string,allocator<string> >::iterator" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR = { "vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_CNumBaselEfloatgR = { "CNumBase<float>" , 99 , -1 };
G__linked_taginfo G__SimpleTableDictLN_CNumBaselEdoublegR = { "CNumBase<double>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSimpleTableDict() {
  G__SimpleTableDictLN_TString.tagnum = -1 ;
  G__SimpleTableDictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR.tagnum = -1 ;
  G__SimpleTableDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__SimpleTableDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__SimpleTableDictLN_string.tagnum = -1 ;
  G__SimpleTableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SimpleTableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimpleTableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SimpleTableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimpleTableDictLN_CTableCellSetter.tagnum = -1 ;
  G__SimpleTableDictLN_CTableColumnLabeler.tagnum = -1 ;
  G__SimpleTableDictLN_CTable.tagnum = -1 ;
  G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator.tagnum = -1 ;
  G__SimpleTableDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__SimpleTableDictLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimpleTableDictLN_CNumBaselEfloatgR.tagnum = -1 ;
  G__SimpleTableDictLN_CNumBaselEdoublegR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSimpleTableDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_TString);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_string);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_CTableCellSetter);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_CTableColumnLabeler);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_CTable),sizeof(CTable),-1,263424,(char*)NULL,G__setup_memvarCTable,G__setup_memfuncCTable);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgR),sizeof(vector<string,allocator<string> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEstringcOallocatorlEstringgRsPgR,G__setup_memfuncvectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR),sizeof(vector<vector<string,allocator<string> >,allocator<vector<string,allocator<string> > > >),-1,298752,(char*)NULL,G__setup_memvarvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_vectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_reverse_iteratorlEvectorlEvectorlEstringcOallocatorlEstringgRsPgRcOallocatorlEvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_CNumBaselEfloatgR),sizeof(CNumBase<float>),-1,297728,(char*)NULL,G__setup_memvarCNumBaselEfloatgR,G__setup_memfuncCNumBaselEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimpleTableDictLN_CNumBaselEdoublegR),sizeof(CNumBase<double>),-1,297728,(char*)NULL,G__setup_memvarCNumBaselEdoublegR,G__setup_memfuncCNumBaselEdoublegR);
}
extern "C" void G__cpp_setupSimpleTableDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupSimpleTableDict()");
  G__set_cpp_environmentSimpleTableDict();
  G__cpp_setup_tagtableSimpleTableDict();

  G__cpp_setup_inheritanceSimpleTableDict();

  G__cpp_setup_typetableSimpleTableDict();

  G__cpp_setup_memvarSimpleTableDict();

  G__cpp_setup_memfuncSimpleTableDict();
  G__cpp_setup_globalSimpleTableDict();
  G__cpp_setup_funcSimpleTableDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSimpleTableDict();
  return;
}
class G__cpp_setup_initSimpleTableDict {
  public:
    G__cpp_setup_initSimpleTableDict() { G__add_setup_func("SimpleTableDict",(G__incsetup)(&G__cpp_setupSimpleTableDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSimpleTableDict() { G__remove_setup_func("SimpleTableDict"); }
};
G__cpp_setup_initSimpleTableDict G__cpp_setup_initializerSimpleTableDict;

